<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="store.seub2hu2.community.mapper.BoardReplyMapper">

  <update id="updateReply">
        update REPLIES
        set
            prev_reply_no = #{reply.prevNo}
            , reply_content = #{reply.content}
            , is_deleted = #{reply.deleted}
            , reply_updated_date = #{reply.updatedDate}
        where
            reply_no = #{reply.no}
  </update>

  <!-- void insertReply(@Param("reply") Reply reply); -->
  <insert id="insertReply" >

    insert into REPLIES
    (
    board_no
    , reply_content
    , user_no
    )
    values
    (
    #{reply.boardNo}
    , #{reply.content}
    , #{reply.user.no}
    )
    <selectKey resultType="int" keyProperty="reply.no" keyColumn="reply_no" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
  </insert>

  <!-- List<Reply> getRepliesByBoardNo(@Param("no") int boardNo); -->
  <select id="getRepliesByBoardNo" resultType="store.seub2hu2.community.vo.Reply" parameterType="int">
    select
      b.board_no                 as boardNo
      , u.user_no                as "user.no"
      , u.user_nickname          as "user.nickname"
      , br.reply_no              as no
      , br.prev_reply_no         as prevNo
      , br.reply_content         as content
      , br.reply_created_date    as createdDate
      , br.reply_updated_date    as updatedDate
      , br.is_report             as report
      , br.board_reply_like      as replyLike
      , br.is_deleted            as deleted
    from BOARDS b join REPLIES br
         on b.board_no = br.board_no
      join USERS u
         on br.user_no = u.user_no
    where b.board_no = #{no}
    order by br.prev_reply_no asc, br.reply_no asc
  </select>

  <!-- Reply getReplyByReplyNo(@Param("no") int replyNo); -->
  <select id="getReplyByReplyNo" parameterType="int">
    select
        br.reply_no                 as no
        , br.prev_reply_no          as prevNo
        , b.board_no                as boardNo
        , br.reply_content          as content
        , br.reply_created_date     as createdDate
        , br.reply_updated_date     as updatedDate
        , u.user_no                 as "user.no"
        , u.user_nickname           as "user.nickname"
        , br.is_report              as report
        , br.board_reply_like       as replyLike
        , br.is_deleted             as deleted
    from
        REPLIES br join BOARDS b
            on br.board_no = b.board_no
        join USERS u
            on br.user_no = u.user_no
    where
        br.reply_no = #{no}
        and br.is_deleted = 'N'
  </select>

  <!-- int getReplyCntByBoardNo(@Param("no") int boardNo); -->
  <select id="getReplyCntByBoardNo" parameterType="int">
    select
        count(*)
    from
        REPLIES
    where board_no = #{no}
  </select>

  <!-- void deleteReplyByNo(@Param("no") int replyNo); -->
  <update id="deleteReplyByNo" parameterType="int">
    update REPLIES
    set is_deleted = 'Y'
    where reply_no = #{no}
  </update>

  <!-- int hasUserLikedReply(@Param("rno") int replyNo, @Param("userNo") int userNo); -->
  <select id="hasUserLikedReply" resultType="int">
    select EXISTS (
      SELECT 1
      FROM BOARD_REPLY_LIKES
      WHERE reply_no = #{rno} and user_no = #{userNo}
    )
  </select>

  <!-- void insertReplyLike(@Param("rno") int replyNo, @Param("userNo") int userNo); -->
  <insert id="insertReplyLike">
    insert into BOARD_REPLY_LIKES
        (
         reply_no
          , user_no
        )
    values
        (
         #{rno}
          , #{userNo}
        )
  </insert>

  <!-- void deleteReplyLike(@Param("rno") int replyNo, @Param("userNo") int userNo); -->
  <delete id="deleteReplyLike">
    delete from BOARD_REPLY_LIKES
    where reply_no = #{rno}
        and user_no = #{userNo}
  </delete>

</mapper>